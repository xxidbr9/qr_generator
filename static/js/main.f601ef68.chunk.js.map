{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","url","setUrl","urlImage","setUrlImage","file","setFile","useEffect","name","Promise","resolve","reject","reader","FileReader","onload","event","target","result","readAsDataURL","fileToDataUri","then","className","type","onChange","e","value","placeholder","files","id","style","display","src","alt","onClick","date","Date","getTime","toString","QrCodeWithLogo","canvas","document","getElementById","content","width","downloadName","download","image","logo","toImage","console","log","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wMA+DeA,EApDH,WAAO,IAAD,EACMC,mBAAS,GADf,mBACTC,EADS,KACJC,EADI,OAEgBF,mBAAS,GAFzB,mBAETG,EAFS,KAECC,EAFD,OAGQJ,mBAAS,IAHjB,mBAGTK,EAHS,KAGHC,EAHG,KA+BhB,OAXAC,qBAAU,WACHF,EAICA,EAAKG,MAjCO,SAACH,GAAD,OAAU,IAAII,SAAQ,SAACC,EAASC,GACpD,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GACfL,EAAQK,EAAMC,OAAOC,SAEvBL,EAAOM,cAAcb,MA6BjBc,CAAcd,GACXe,KAAKhB,GALRA,EAAY,MAOb,CAACC,IAGF,qBAAKgB,UAAU,cAAf,SACE,sBAAKA,UAAU,mEAAf,UACE,8BACE,uBAAOA,UAAU,oCAAoCC,KAAK,OAAOC,SAAU,SAAAC,GAAC,OAAItB,EAAOsB,EAAER,OAAOS,QAAQC,YAAY,kBAEtH,8BACE,uBAAOL,UAAU,SAASC,KAAK,OAAOC,SAAU,SAAAC,GAAC,OAAIlB,EAAQkB,EAAER,OAAOW,MAAM,SAE9E,gCACE,wBAAQC,GAAG,SAASC,MAAO,CAAEC,QAAS,UACtC,qBAAKC,IAAI,GAAGC,IAAI,GAAGJ,GAAG,QAAQP,UAAU,cAE1C,qBAAKA,UAAU,QAAf,SACE,wBAAQY,QAzCO,WACrB,IAAMC,GAAO,IAAIC,MAAOC,UAAUC,WACvB,IAAIC,IAAe,CAC5BC,OAAQC,SAASC,eAAe,UAChCC,QAASzC,EACT0C,MAAO,IACPC,aAAa,mBAAD,OAAqBV,GACjCW,UAAU,EACVC,MAAON,SAASC,eAAe,SAC/BM,KAAM,CACJhB,IAAK5B,KAEN6C,UACA5B,MAAK,SAAAI,GAAC,OAAIyB,QAAQC,IAAI1B,MAAI2B,MAAMF,QAAQC,MA4BJ7B,UAAU,wBAA3C,iCC5CK+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASC,eAAe,SAM1BW,M","file":"static/js/main.f601ef68.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport QrCodeWithLogo from 'qrcode-with-logos'\n\nconst fileToDataUri = (file) => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.onload = (event) => {\n    resolve(event.target.result)\n  };\n  reader.readAsDataURL(file);\n})\n\nconst App = () => {\n  const [url, setUrl] = useState(0);\n  const [urlImage, setUrlImage] = useState(0);\n  const [file, setFile] = useState({})\n  const handleGenerate = () => {\n    const date = new Date().getTime().toString()\n    const qr = new QrCodeWithLogo({\n      canvas: document.getElementById(\"canvas\"),\n      content: url,\n      width: 380,\n      downloadName: `xxidbr9_qr_code_${date}`,\n      download: true,\n      image: document.getElementById(\"image\"),\n      logo: {\n        src: urlImage\n      }\n    }).toImage();\n    qr.then(e => console.log(e)).catch(console.log)\n  }\n\n  useEffect(() => {\n    if (!file) {\n      setUrlImage('');\n      return;\n    }\n    if (!!file.name) {\n      fileToDataUri(file)\n        .then(setUrlImage)\n    }\n  }, [file])\n\n  return (\n    <div className=\"bg-pink-400\">\n      <div className=\"container max-w-screen-md px-5 mx-auto text-center bg-yellow-400\">\n        <div>\n          <input className=\"mb-4 w-full bg-gray-100 px-4 py-2\" type=\"text\" onChange={e => setUrl(e.target.value)} placeholder=\"masukan url\" />\n        </div>\n        <div>\n          <input className=\"w-full\" type=\"file\" onChange={e => setFile(e.target.files[0])} />\n        </div>\n        <div>\n          <canvas id=\"canvas\" style={{ display: \"none\" }}></canvas>\n          <img src=\"\" alt=\"\" id=\"image\" className=\"w-full\" />\n        </div>\n        <div className=\"w-max\">\n          <button onClick={handleGenerate} className=\"bg-purple-500 w-full \">Generate QR</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}